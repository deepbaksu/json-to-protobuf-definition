"use strict";
// source: src/models/models.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
goog.exportSymbol('proto.ProtoField', null, global);
goog.exportSymbol('proto.ProtoMessage', null, global);
goog.exportSymbol('proto.ProtoPrimitive', null, global);
goog.exportSymbol('proto.ProtoType', null, global);
goog.exportSymbol('proto.ProtoType.TypeCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoMessage = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.ProtoMessage.repeatedFields_, null);
};
goog.inherits(proto.ProtoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ProtoMessage.displayName = 'proto.ProtoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoField = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ProtoField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ProtoField.displayName = 'proto.ProtoField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProtoType = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ProtoType.oneofGroups_);
};
goog.inherits(proto.ProtoType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.ProtoType.displayName = 'proto.ProtoType';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProtoMessage.repeatedFields_ = [2];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ProtoMessage.prototype.toObject = function (opt_includeInstance) {
        return proto.ProtoMessage.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ProtoMessage} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ProtoMessage.toObject = function (includeInstance, msg) {
        var f, obj = {
            name: jspb.Message.getFieldWithDefault(msg, 1, ""),
            fieldsList: jspb.Message.toObjectList(msg.getFieldsList(), proto.ProtoField.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoMessage}
 */
proto.ProtoMessage.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ProtoMessage;
    return proto.ProtoMessage.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoMessage}
 */
proto.ProtoMessage.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 2:
                var value = new proto.ProtoField;
                reader.readMessage(value, proto.ProtoField.deserializeBinaryFromReader);
                msg.addFields(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoMessage.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ProtoMessage.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoMessage.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getFieldsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(2, f, proto.ProtoField.serializeBinaryToWriter);
    }
};
/**
 * optional string name = 1;
 * @return {string}
 */
proto.ProtoMessage.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProtoMessage} returns this
 */
proto.ProtoMessage.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * repeated ProtoField fields = 2;
 * @return {!Array<!proto.ProtoField>}
 */
proto.ProtoMessage.prototype.getFieldsList = function () {
    return /** @type{!Array<!proto.ProtoField>} */ (jspb.Message.getRepeatedWrapperField(this, proto.ProtoField, 2));
};
/**
 * @param {!Array<!proto.ProtoField>} value
 * @return {!proto.ProtoMessage} returns this
*/
proto.ProtoMessage.prototype.setFieldsList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 2, value);
};
/**
 * @param {!proto.ProtoField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ProtoField}
 */
proto.ProtoMessage.prototype.addFields = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ProtoField, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProtoMessage} returns this
 */
proto.ProtoMessage.prototype.clearFieldsList = function () {
    return this.setFieldsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ProtoField.prototype.toObject = function (opt_includeInstance) {
        return proto.ProtoField.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ProtoField} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ProtoField.toObject = function (includeInstance, msg) {
        var f, obj = {
            type: (f = msg.getType()) && proto.ProtoType.toObject(includeInstance, f),
            name: jspb.Message.getFieldWithDefault(msg, 2, ""),
            tag: jspb.Message.getFieldWithDefault(msg, 3, 0),
            repeated: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoField}
 */
proto.ProtoField.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ProtoField;
    return proto.ProtoField.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoField}
 */
proto.ProtoField.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ProtoType;
                reader.readMessage(value, proto.ProtoType.deserializeBinaryFromReader);
                msg.setType(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setName(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setTag(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setRepeated(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoField.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ProtoField.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoField.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getType();
    if (f != null) {
        writer.writeMessage(1, f, proto.ProtoType.serializeBinaryToWriter);
    }
    f = message.getName();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getTag();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getRepeated();
    if (f) {
        writer.writeBool(4, f);
    }
};
/**
 * optional ProtoType type = 1;
 * @return {?proto.ProtoType}
 */
proto.ProtoField.prototype.getType = function () {
    return /** @type{?proto.ProtoType} */ (jspb.Message.getWrapperField(this, proto.ProtoType, 1));
};
/**
 * @param {?proto.ProtoType|undefined} value
 * @return {!proto.ProtoField} returns this
*/
proto.ProtoField.prototype.setType = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoField} returns this
 */
proto.ProtoField.prototype.clearType = function () {
    return this.setType(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoField.prototype.hasType = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional string name = 2;
 * @return {string}
 */
proto.ProtoField.prototype.getName = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.ProtoField} returns this
 */
proto.ProtoField.prototype.setName = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 tag = 3;
 * @return {number}
 */
proto.ProtoField.prototype.getTag = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.ProtoField} returns this
 */
proto.ProtoField.prototype.setTag = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional bool repeated = 4;
 * @return {boolean}
 */
proto.ProtoField.prototype.getRepeated = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};
/**
 * @param {boolean} value
 * @return {!proto.ProtoField} returns this
 */
proto.ProtoField.prototype.setRepeated = function (value) {
    return jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ProtoType.oneofGroups_ = [[1, 2]];
/**
 * @enum {number}
 */
proto.ProtoType.TypeCase = {
    TYPE_NOT_SET: 0,
    PROTO_TYPE_MESSAGE: 1,
    PROTO_TYPE_PRIMITIVE: 2
};
/**
 * @return {proto.ProtoType.TypeCase}
 */
proto.ProtoType.prototype.getTypeCase = function () {
    return /** @type {proto.ProtoType.TypeCase} */ (jspb.Message.computeOneofCase(this, proto.ProtoType.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.ProtoType.prototype.toObject = function (opt_includeInstance) {
        return proto.ProtoType.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.ProtoType} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.ProtoType.toObject = function (includeInstance, msg) {
        var f, obj = {
            protoTypeMessage: (f = msg.getProtoTypeMessage()) && proto.ProtoMessage.toObject(includeInstance, f),
            protoTypePrimitive: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProtoType}
 */
proto.ProtoType.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.ProtoType;
    return proto.ProtoType.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProtoType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProtoType}
 */
proto.ProtoType.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.ProtoMessage;
                reader.readMessage(value, proto.ProtoMessage.deserializeBinaryFromReader);
                msg.setProtoTypeMessage(value);
                break;
            case 2:
                var value = /** @type {!proto.ProtoPrimitive} */ (reader.readEnum());
                msg.setProtoTypePrimitive(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProtoType.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.ProtoType.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProtoType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProtoType.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getProtoTypeMessage();
    if (f != null) {
        writer.writeMessage(1, f, proto.ProtoMessage.serializeBinaryToWriter);
    }
    f = /** @type {!proto.ProtoPrimitive} */ (jspb.Message.getField(message, 2));
    if (f != null) {
        writer.writeEnum(2, f);
    }
};
/**
 * optional ProtoMessage proto_type_message = 1;
 * @return {?proto.ProtoMessage}
 */
proto.ProtoType.prototype.getProtoTypeMessage = function () {
    return /** @type{?proto.ProtoMessage} */ (jspb.Message.getWrapperField(this, proto.ProtoMessage, 1));
};
/**
 * @param {?proto.ProtoMessage|undefined} value
 * @return {!proto.ProtoType} returns this
*/
proto.ProtoType.prototype.setProtoTypeMessage = function (value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.ProtoType.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.ProtoType} returns this
 */
proto.ProtoType.prototype.clearProtoTypeMessage = function () {
    return this.setProtoTypeMessage(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoType.prototype.hasProtoTypeMessage = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional ProtoPrimitive proto_type_primitive = 2;
 * @return {!proto.ProtoPrimitive}
 */
proto.ProtoType.prototype.getProtoTypePrimitive = function () {
    return /** @type {!proto.ProtoPrimitive} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {!proto.ProtoPrimitive} value
 * @return {!proto.ProtoType} returns this
 */
proto.ProtoType.prototype.setProtoTypePrimitive = function (value) {
    return jspb.Message.setOneofField(this, 2, proto.ProtoType.oneofGroups_[0], value);
};
/**
 * Clears the field making it undefined.
 * @return {!proto.ProtoType} returns this
 */
proto.ProtoType.prototype.clearProtoTypePrimitive = function () {
    return jspb.Message.setOneofField(this, 2, proto.ProtoType.oneofGroups_[0], undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProtoType.prototype.hasProtoTypePrimitive = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * @enum {number}
 */
proto.ProtoPrimitive = {
    PROTO_PRIMITIVE_UNKNOWN: 0,
    PROTO_PRIMITIVE_INT64: 1,
    PROTO_PRIMITIVE_STRING: 2,
    PROTO_PRIMITIVE_BOOL: 3,
    PROTO_PRIMITIVE_DOUBLE: 4
};
goog.object.extend(exports, proto);
//# sourceMappingURL=models_pb.js.map